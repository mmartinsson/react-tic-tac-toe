{"version":3,"sources":["index.js"],"names":["winningSquares","Square","props","highlight","className","onClick","value","Board","squareIndex","this","squares","highlights","includes","map","row","index","renderSquare","React","Component","Game","state","history","Array","fill","lastSelectedIndex","currentMoveNumber","xIsNext","selectedIndex","slice","length","winningPlayer","setState","concat","targetMoveNumber","winner","numberOfMoves","filter","Boolean","nextPlayer","historyBoard","historyMoveIndex","historyMoveNumber","player","column","Math","floor","jumpToAfter","currentBoard","i","handleClick","winningRow","status","historyMoves","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7469fa1.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst winningSquares = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n\r\nfunction Square(props) {\r\n    const highlight = props.highlight ? \"square-highlight\" : \"\"\r\n    return (\r\n      <button className={`square ${highlight}`} onClick={props.onClick}>\r\n          {props.value}\r\n      </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(squareIndex) {\r\n    return <Square\r\n      value={this.props.squares[squareIndex]}\r\n      highlight={this.props.highlights.includes(squareIndex)}\r\n      onClick={() => this.props.onClick(squareIndex)}\r\n    />;\r\n  }\r\n\r\n  render() {\r\n    const squares = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8]\r\n    ]\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          squares.map((row) => (\r\n              <div className=\"board-row\">\r\n                {row.map(index => this.renderSquare(index))}\r\n              </div>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        lastSelectedIndex: null\r\n      }],\r\n      currentMoveNumber: 0,\r\n      xIsNext: true\r\n    }\r\n  }\r\n\r\n  handleClick(selectedIndex) {\r\n    const history = this.state.history.slice(0, this.state.currentMoveNumber + 1)\r\n    const current = history[history.length - 1]\r\n    const squares = current.squares.slice()\r\n    if(winningPlayer(squares) || squares[selectedIndex]) {\r\n      return\r\n    }\r\n    squares[selectedIndex] = this.state.xIsNext ? 'X' : 'O'\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        lastSelectedIndex: selectedIndex\r\n      }]),\r\n      currentMoveNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    })\r\n  }\r\n\r\n  jumpToAfter(targetMoveNumber) {\r\n    this.setState({\r\n      currentMoveNumber: targetMoveNumber,\r\n      xIsNext: (targetMoveNumber % 2) === 0\r\n    })\r\n  }\r\n\r\n  status(squares) {\r\n    const winner = winningPlayer(squares)\r\n    const numberOfMoves = squares.filter(Boolean).length\r\n    const nextPlayer = numberOfMoves % 2 ? 'O' : 'X'\r\n\r\n    if(winner) {\r\n      return `Player ${winner} won!`\r\n    } else if(numberOfMoves === 9) {\r\n      return 'The match was a draw'\r\n    } else {\r\n      return `Next player: ${nextPlayer}`\r\n    }\r\n  }\r\n\r\n  historyMoves(history) {\r\n    return history.slice(1).map((historyBoard, historyMoveIndex) => {\r\n      const historyMoveNumber = historyMoveIndex + 1\r\n      const player = historyMoveNumber % 2 ? 'X' : 'O'\r\n      const column = (historyBoard.lastSelectedIndex % 3) + 1\r\n      const row = Math.floor(historyBoard.lastSelectedIndex / 3) + 1\r\n      const className = historyMoveNumber === this.state.currentMoveNumber ? \"selected\" : \"not-selected\"\r\n\r\n      return (\r\n          <li className={className} key={historyMoveNumber}>\r\n            <div>Player {player} selected column {column} row {row}</div>\r\n            <button\r\n                className=\"history-button\"\r\n                onClick={() => this.jumpToAfter(historyMoveNumber)}>{'Go to this move'}\r\n            </button>\r\n          </li>\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const currentBoard = this.state.history[this.state.currentMoveNumber]\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={currentBoard.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            highlights={winningRow(currentBoard.squares)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div className=\"status\">{this.status(currentBoard.squares)}</div>\r\n          <button onClick={() => this.jumpToAfter(0)}>Go to game start</button>\r\n          <ol>{this.historyMoves(this.state.history)}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction winningPlayer(squares) {\r\n  for (let i = 0; i < winningSquares.length; i++) {\r\n    const [a, b, c] = winningSquares[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction winningRow(squares) {\r\n  for (let i = 0; i < winningSquares.length; i++) {\r\n    const [a, b, c] = winningSquares[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return winningSquares[i];\r\n    }\r\n  }\r\n  return [];\r\n}\r\n"],"sourceRoot":""}